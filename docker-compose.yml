# JuSia/docker-compose.yml
version: "3.8"

services:
  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=run.py
      - DATABASE_URL=postgresql://postgres:postgres@user-db:5432/users
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-db:
    image: postgres:13
    container_name: user-db
    environment:
      - POSTGRES_DB=users
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Product Service
  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=run.py
      - FLASK_DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres@product-db:5432/products
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
    depends_on:
      product-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-db:
    image: postgres:13
    container_name: product-db
    environment:
      - POSTGRES_DB=products
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Cart Service
  cart-service:
    build: ./cart-service
    container_name: cart-service
    ports:
      - "5003:5003"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@cart-db:5432/carts
      - REDIS_URL=redis://cart-cache:6379/0
    depends_on:
      - cart-db
      - cart-cache
    networks:
      - microservices-network

  cart-db:
    image: postgres:13
    container_name: cart-db
    environment:
      - POSTGRES_DB=carts
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    volumes:
      - cart_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  cart-cache:
    image: redis:6
    container_name: cart-cache
    ports:
      - "6379:6379"
    volumes:
      - cart_redis_data:/data
    networks:
      - microservices-network

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "5002:5002"
    environment:
      - FLASK_APP=run.py
      - FLASK_DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres@order-db:5432/orders
    depends_on:
      order-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-db:
    image: postgres:13
    container_name: order-db
    environment:
      - POSTGRES_DB=orders
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5435:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  microservices-network:
    driver: bridge

volumes:
  user_postgres_data:
  product_postgres_data:
  cart_postgres_data:
  cart_redis_data:
  order_postgres_data:
